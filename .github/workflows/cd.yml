# Shamelessly stole a lot of this logic from the awesome ripgrep:
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: release

on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create release
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> "$GITHUB_ENV"

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      # - name: Check that tag version and Cargo.toml version are the same
      #   shell: bash
      #   run: |
      #     if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
      #       echo "version does not match Cargo.toml" >&2
      #       exit 1
      #     fi

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "$VERSION" --draft --verify-tag --title "$VERSION"

    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: cargo build
    needs: ['create-release']
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust Toolchain Setup
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Rust Release Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=dsa_hybrid_editor-$version-${{ matrix.target }}" >> "$GITHUB_ENV"
          bin="target/${{ matrix.target }}/release/dsa_hybrid_editor"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="$bin.exe"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Create directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$ARCHIVE"/
          cp -r chars "$ARCHIVE"/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czvf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
